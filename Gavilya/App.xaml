<Application
    x:Class="Gavilya.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Gavilya">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Themes/Dark.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="TitleBarButtonStyle" TargetType="Button">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Height" Value="32" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                CornerRadius="5"
                                SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Focusable="False"
                                    RecognizesAccessKey="True" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TitleBarCloseButtonStyle" TargetType="Button">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="Height" Value="32" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="border"
                                Background="Transparent"
                                BorderThickness="0"
                                CornerRadius="5"
                                SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Focusable="False"
                                    RecognizesAccessKey="True" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="Red" />
                                    <Setter Property="Foreground" Value="DarkRed" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="Red" />
                                    <Setter Property="Foreground" Value="DarkRed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="NavBarBtn" TargetType="RadioButton">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Border
                                x:Name="ButtonBorder"
                                MinWidth="40"
                                MinHeight="20"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="Transparent"
                                BorderThickness="2 0 0 0"
                                CornerRadius="5">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="Center"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RegularButton" TargetType="Button">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border
                                x:Name="ButtonBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                CornerRadius="5"
                                Cursor="Hand"
                                SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="RegularButton2" TargetType="Button">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border
                                x:Name="ButtonBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                CornerRadius="5"
                                Cursor="Hand"
                                SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="AccentButton" TargetType="Button">
                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border
                                x:Name="ButtonBorder"
                                MinWidth="20"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                CornerRadius="5">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource DarkAccent}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource DarkAccent}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TabButton" TargetType="RadioButton">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Border
                                x:Name="border"
                                Background="{DynamicResource SelectedBackground}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding Border.CornerRadius}"
                                Cursor="Hand"
                                SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource DarkAccent}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource DarkAccent}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource Accent}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style
                x:Key="TabButtonFirst"
                BasedOn="{StaticResource TabButton}"
                TargetType="RadioButton">
                <Setter Property="Border.CornerRadius" Value="5,0,0,5" />
            </Style>

            <Style
                x:Key="TabButtonMiddle"
                BasedOn="{StaticResource TabButton}"
                TargetType="RadioButton">
                <Setter Property="Border.CornerRadius" Value="0" />
            </Style>
            <Style
                x:Key="TabButtonLast"
                BasedOn="{StaticResource TabButton}"
                TargetType="RadioButton">
                <Setter Property="Border.CornerRadius" Value="0,5,5,0" />
            </Style>

            <Style x:Key="CheckBoxStyle1" TargetType="CheckBox">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="CheckBox">
                            <Grid
                                x:Name="templateRoot"
                                Background="Transparent"
                                SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border
                                    x:Name="checkBoxBorder"
                                    Margin="1"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="Center"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2,2,2,2">
                                    <Grid x:Name="markGrid">
                                        <Path
                                            x:Name="optionMark"
                                            Margin="1"
                                            Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                            Fill="{DynamicResource Foreground}"
                                            Opacity="0"
                                            Stretch="None" />
                                        <Rectangle
                                            x:Name="indeterminateMark"
                                            Margin="2"
                                            Fill="{DynamicResource Foreground}"
                                            Opacity="0"
                                            RadiusX="2"
                                            RadiusY="2" />
                                    </Grid>
                                </Border>
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="Center"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="True">
                                    <Setter Property="Padding" Value="4 -1 0 0" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="checkBoxBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                                    <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource Foreground}" />
                                    <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource Foreground}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource SelectedBackground}" />
                                    <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                                    <Setter TargetName="optionMark" Property="Fill" Value="LightGray" />
                                    <Setter TargetName="indeterminateMark" Property="Fill" Value="LightGray" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                                    <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                                    <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="PlayButton" TargetType="{x:Type Button}">
                <Setter Property="Foreground" Value="{DynamicResource HoverForeground}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="border"
                                Background="{DynamicResource PlayGradient}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                CornerRadius="5,5,5,5"
                                SnapsToDevicePixels="true">

                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource HoverForeground}" />

                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource PlayGradientHover}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource HoverForeground}" />

                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource PlayGradientPressed}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource HoverForeground}" />

                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="EditButton" TargetType="{x:Type Button}">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5,5,5,5"
                                SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RegularTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="AllowDrop" Value="true" />
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border
                                x:Name="border"
                                Height="{TemplateBinding Height}"
                                Padding="3"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5,5,5,5"
                                SnapsToDevicePixels="True">
                                <ScrollViewer
                                    x:Name="PART_ContentHost"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                    Focusable="false"
                                    FontSize="14"
                                    FontWeight="ExtraBold"
                                    HorizontalScrollBarVisibility="Hidden"
                                    VerticalScrollBarVisibility="Hidden" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True" />
                            <Condition Property="IsSelectionActive" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <Grid x:Name="TemplateRoot">
                                <Border
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="5,5,5,5" />
                                <Rectangle
                                    x:Name="PART_Track"
                                    RadiusX="5"
                                    RadiusY="5" />
                                <Grid
                                    x:Name="PART_Indicator"
                                    HorizontalAlignment="Left"
                                    ClipToBounds="true">
                                    <Rectangle
                                        x:Name="Indicator"
                                        Fill="{TemplateBinding Foreground}"
                                        RadiusX="5"
                                        RadiusY="5" />
                                    <Rectangle
                                        x:Name="Animation"
                                        Fill="{TemplateBinding Foreground}"
                                        RadiusX="5"
                                        RadiusY="5"
                                        RenderTransformOrigin="0.5,0.5">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform />
                                                <SkewTransform />
                                                <RotateTransform />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Determinate" />
                                        <VisualState x:Name="Indeterminate">
                                            <Storyboard RepeatBehavior="Forever">
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                                    <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                                    <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                                    <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                                    <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                                    <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                                </PointAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Orientation" Value="Vertical">
                                    <Setter TargetName="TemplateRoot" Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsIndeterminate" Value="true">
                                    <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  ScrollViewer Template  -->
            <ControlTemplate x:Key="ScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
                <Grid Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
                    <ScrollBar
                        x:Name="PART_VerticalScrollBar"
                        Grid.Column="1"
                        Width="10"
                        Maximum="{TemplateBinding ScrollableHeight}"
                        ViewportSize="{TemplateBinding ViewportHeight}"
                        Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                        Value="{TemplateBinding VerticalOffset}">
                        <ScrollBar.Template>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Track x:Name="PART_Track" IsDirectionReversed="true">
                                    <Track.Thumb>
                                        <Thumb Background="{DynamicResource SelectedBackground}">
                                            <Thumb.Template>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border
                                                        Margin="5"
                                                        Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        CornerRadius="4" />
                                                </ControlTemplate>
                                            </Thumb.Template>
                                        </Thumb>
                                    </Track.Thumb>
                                </Track>
                            </ControlTemplate>
                        </ScrollBar.Template>
                    </ScrollBar>
                </Grid>
            </ControlTemplate>

            <!--  Apply the ScrollViewer Template to ScrollViewer  -->
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
                <Setter Property="VerticalScrollBarVisibility" Value="Visible" />
                <Setter Property="Template" Value="{StaticResource ScrollViewerTemplate}" />
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
